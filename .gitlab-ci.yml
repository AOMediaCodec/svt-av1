stages:
  - compile
  - test

variables:
  CMAKE_GENERATOR: Ninja

#
# General checks
#

Style check:
  stage: .pre
  image: registry.gitlab.com/aomediacodec/aom-testing/alpine3
  script:
    - ./test/stylecheck.sh

Static analysis (cppcheck):
  stage: compile
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu1804
  cache:
    key: cppcheck
    paths:
      - .cppcheck
    policy: pull-push
  variables:
    CMAKE_GENERATOR: Unix Makefiles
  script:
    - cmake -B Build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - mkdir -p .cppcheck
    - jq '.[]|=with_entries(select(.value | test(".asm|/SVT-AV1/Build/cpuinfo") | not)) | unique' Build/compile_commands.json > compile_commands.json
    - |
      cppcheck \
        --project=compile_commands.json \
        --error-exitcode=1 \
        --enable=all \
        -j 2 \
        -rp=$PWD \
        -ithird_party \
        --cppcheck-build-dir=.cppcheck \
        --suppress=unusedFunction > /dev/null

#
# Linux CI Jobs
#
.linux-compiler-base:
  stage: compile
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  variables:
    CFLAGS: -Werror -Wshadow $EXTRA_CFLAGS
    CXXFLAGS: -Werror -Wshadow $EXTRA_CXXFLAGS
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .ccache
    policy: pull-push
  script:
    - ccache -s
    - eval cmake -B Build -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:=Release} -DBUILD_SHARED_LIBS=OFF $EXTRA_CMAKE_FLAGS
    - cmake --build Build --config $CMAKE_BUILD_TYPE --target install
    - ccache -s

Linux (Clang):
  extends: .linux-compiler-base
  parallel:
    matrix:
      - CC: clang-6.0
        CXX: clang++-6.0
      - CC: clang-10
        CXX: clang++-10

Linux (GCC 4):
  extends: .linux-compiler-base
  image: registry.gitlab.com/aomediacodec/aom-testing/centos7

Linux (Valgrind):
  extends: .linux-compiler-base
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu1804
  variables:
    EXTRA_CFLAGS: -Wno-error -g
    EXTRA_CXXFLAGS: -Wno-error -g
    EXTRA_CMAKE_FLAGS: -DCMAKE_OUTPUT_DIRECTORY=valgrind
    CMAKE_BUILD_TYPE: Debug
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - valgrind/

Linux (GCC):
  extends: .linux-compiler-base
  parallel:
    matrix:
      - CC: gcc-7
        CXX: g++-7
      - CC: gcc-8
        CXX: g++-8
      - CC: gcc-9
        CXX: g++-9
      - CC: gcc-10
        CXX: g++-10
        EXTRA_CMAKE_FLAGS: -DENABLE_AVX512=ON
      - CC: aarch64-linux-gnu-gcc
        CXX: aarch64-linux-gnu-g++
        EXTRA_CMAKE_FLAGS: -DCMAKE_TOOLCHAIN_FILE=$CI_PROJECT_DIR/aarch64-linux-gnu.cmake
      - CC: powerpc64le-linux-gnu-gcc
        CXX: powerpc64le-linux-gnu-g++
        EXTRA_CMAKE_FLAGS: -DCMAKE_TOOLCHAIN_FILE=$CI_PROJECT_DIR/powerpc64le-linux-gnu.cmake -DCROSS=powerpc64le-linux-gnu-
  before_script:
    - |
      case $CC in
      aarch64-linux-gnu-gcc)
        curl -Ls "https://aomedia.googlesource.com/aom/+/refs/heads/master/build/cmake/toolchains/arm64-linux-gcc.cmake?format=TEXT" |
          base64 -d > aarch64-linux-gnu.cmake
        ;;
      powerpc64le-linux-gnu-gcc)
        curl -Ls "https://aomedia.googlesource.com/aom/+/refs/heads/master/build/cmake/toolchains/ppc-linux-gcc.cmake?format=TEXT" |
          base64 -d > powerpc64le-linux-gnu.cmake
        ;;
      esac

Linux (GCC 10):
  extends: .linux-compiler-base
  variables:
    CC: gcc-10
    CXX: g++-10
    LDFLAGS: -static -static-libgcc -static-libstdc++
    GIT_DEPTH: 0
  parallel:
    matrix:
      - CMAKE_BUILD_TYPE: Release
      - CMAKE_BUILD_TYPE: Debug
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - Bin/Release/SvtAv1EncApp
      - Bin/Release/SvtAv1DecApp
      - Bin/Debug/SvtAv1EncApp
      - Bin/Debug/SvtAv1DecApp

Linux (GCC 10, Tests, Static):
  extends: .linux-compiler-base
  variables:
    CC: gcc-10
    CXX: g++-10
    EXTRA_CFLAGS: -Wno-error -g
    EXTRA_CXXFLAGS: -Wno-error -g
    LDFLAGS: -static -static-libgcc -static-libstdc++
    EXTRA_CMAKE_FLAGS: -DBUILD_TESTING=ON -DBUILD_APPS=OFF
  artifacts:
    untracked: false
    expire_in: 1 day
    paths:
      - Bin/Release/SvtAv1UnitTests
      - Bin/Release/SvtAv1ApiTests
      - Bin/Release/SvtAv1E2ETests

Linux Sanitizer Compile:
  extends: .linux-compiler-base
  variables:
    CC: clang-10
    CXX: clang++-10
    CMAKE_BUILD_TYPE: Debug
    EXTRA_CMAKE_FLAGS: -DCMAKE_OUTPUT_DIRECTORY=$SANITIZER -DSANITIZER=$SANITIZER
  parallel:
    matrix:
      - SANITIZER: address
      - SANITIZER: memory
      - SANITIZER: thread
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - address/
      - memory/
      - thread/

.tests:
  stage: test
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  before_script:
    - cp /*.zst .
    - zstd -d *.zst

Valgrind:
  extends: .tests
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu1804
  allow_failure: true
  parallel:
    matrix:
      - PASSES: 2
      - PASS: 1
  script:
    # --error-limit=no --leak-check=full --show-leak-kinds=all makes the log very huge and takes around 16 minutes
    - valgrind --error-exitcode=1 --track-origins=yes --suppressions=/usr/lib/valgrind/debian.supp -- ./valgrind/SvtAv1EncApp --preset 6 ${PASS:+--pass $PASS} -i akiyo_cif.y4m -n 10 -b test1.ivf
  needs:
    - "Linux (Valgrind)"

Linux Sanitizer Test:
  extends: .tests
  image: registry.gitlab.com/aomediacodec/aom-testing/ubuntu2004
  variables:
    LSAN_OPTIONS: "verbosity=2:color=always:log_pointers=1:log_threads=1:report_objects=1"
    ASAN_OPTIONS: "verbosity=2:color=always:print_cmdline=1:strict_string_checks=1:symbolize=1:detect_leaks=1:fast_unwind_on_malloc=0:strict_memcmp=0"
    MSAN_OPTIONS: "verbosity=2:color=always"
    TSAN_OPTIONS: "verbosity=2:color=always:suppressions=./.github/workflows/sanitizers-known-warnings.txt"
  parallel:
    matrix:
      - SANITIZER: address
      - SANITIZER: memory
        svt_asm: 0
      - SANITIZER: thread
  script:
    - |
      command="$PWD/$SANITIZER/SvtAv1EncApp -i Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m ${svt_asm:+--asm $svt_asm} -n 60 --preset 8 -b output.ivf"
      case $SANITIZER in
      address|memory) $command ;;
      *) gdb -q -ex "handle SIG32 nostop" -ex r -ex bt -ex q --return-child-result --args $command ;;
      esac
  needs:
    - Linux Sanitizer Compile

.unit tests:
  extends: .tests
  parallel: 50
  variables:
    GTEST_TOTAL_SHARDS: 50
    GTEST_OUTPUT: "xml:report.xml"

  artifacts:
    when: always
    reports:
      junit: report.xml
  needs:
    - 'Linux (GCC 10, Tests, Static)'

Linux Unit Tests:
  extends: .unit tests
  script:
    - export GTEST_SHARD_INDEX=$((CI_NODE_INDEX - 1))
    - mkdir -p unittests
    - ./Bin/Release/SvtAv1UnitTests

Linux E2E Tests:
  extends: .unit tests
  variables:
    SVT_AV1_TEST_VECTOR_PATH: $CI_PROJECT_DIR
  script:
    - export GTEST_SHARD_INDEX=$((CI_NODE_INDEX - 1))
    - mkdir -p unittests
    - mv test/vectors/* .
    - ./Bin/Release/SvtAv1E2ETests --gtest_filter=-*DummySrcTest*

Linux (Gstreamer, Static):
  extends: .tests
  variables:
    CC: gcc-10
    CXX: g++-10
    CFLAGS: -pipe -O3
    CXXFLAGS: -pipe -O3
    LDFLAGS: -pipe
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache
    PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
    GIT_DEPTH: 0
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .ccache
    policy: pull-push
  needs:
    - 'Linux (GCC 10)'
  script:
    - cmake -B Build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_APPS=OFF -DBUILD_DEC=OFF
    - cmake --build Build --config Release --target install
    - meson setup gstreamer-plugin/build gstreamer-plugin -Dprefix=/usr
    - ninja -C gstreamer-plugin/build install
    - |
      gst-launch-1.0 -v filesrc location=akiyo_cif.y4m \
        ! y4mdec \
        ! svtav1enc \
        ! webmmux \
        ! filesink location=akiyo.mkv

Linux (FFmpeg, Static):
  extends: .tests
  variables:
    CC: gcc-10
    CXX: g++-10
    CFLAGS: -pipe -O3
    CXXFLAGS: -pipe -O3
    LDFLAGS: -pipe -static -static-libgcc -static-libstdc++
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache
    PKG_CONFIG_PATH: /usr/local/lib/pkgconfig
    GIT_DEPTH: 0
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .ccache
    policy: pull-push
  needs:
    - 'Linux (GCC 10)'
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - ffmpeg
  script:
    - ccache -s
    - git clone https://aomedia.googlesource.com/aom
    - git clone https://chromium.googlesource.com/webm/libvpx
    - git clone https://code.videolan.org/videolan/dav1d.git
    - git clone https://github.com/Netflix/vmaf.git
    - git clone https://github.com/FFmpeg/FFmpeg.git

    # SVT-AV1
    - cmake -B svtav1-build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_APPS=OFF -DBUILD_DEC=OFF
    - cmake --build svtav1-build --config Release --target install

    # aom
    - cmake -S aom -B aom-build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DENABLE_DOCS=0 -DENABLE_TESTDATA=0 -DENABLE_TOOLS=0
    - cmake --build aom-build --config Release --target install

    # libvpx
    - mkdir -p vpx-build && cd vpx-build || exit 1
    - |
      ../libvpx/configure \
        --disable-dependency-tracking \
        --disable-docs \
        --disable-examples \
        --disable-libyuv \
        --disable-postproc \
        --disable-shared \
        --disable-tools \
        --disable-unit-tests \
        --disable-webm-io \
        --enable-postproc \
        --enable-runtime-cpu-detect \
        --enable-vp8 --enable-vp9 \
        --enable-vp9-highbitdepth \
        --enable-vp9-postproc
    - make -j $(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu) install
    - cd -

    # dav1d
    - |
      meson setup \
        --default-library static \
        --buildtype release \
        --libdir lib \
        -Denable_tests=false \
        -Denable_examples=false \
        -Denable_tools=false \
        dav1d-build dav1d
    - meson install -C dav1d-build

    # vmaf
    - |
      meson setup \
        --default-library static \
        --buildtype release \
        --libdir lib \
        -Denable_tests=false \
        -Denable_docs=false \
        -Dbuilt_in_models=true \
        -Denable_float=true \
        vmaf-build vmaf/libvmaf
    - meson install -C vmaf-build

    # symbol conflict tests
    - |
      conflicts=$(
        nm -Ag --defined-only /usr/local/lib/lib{SvtAv1Enc,aom,dav1d,vpx,vmaf}.a 2>/dev/null |
        sort -k3 |
        uniq -D -f2 |
        sed '/:$/d;/^$/d'
      )
      if [ -n "$conflicts" ]; then
        printf 'Conflicts Found!\n%s\n' "$conflicts"
        exit 1
      fi

    # FFmpeg
    # Uses ld=CXX for libvmaf to autolink the stdc++ library
    - mkdir -p FFmpeg-build && cd FFmpeg-build || exit 1
    - |
      ../FFmpeg/configure \
        --arch=x86_64 \
        --pkg-config-flags="--static" \
        --cc="${CC:-ccache gcc}" \
        --cxx="${CXX:-ccache g++}" \
        --ld="${CXX:-ccache g++}" \
        --enable-gpl --enable-static \
        --enable-libaom \
        --enable-libdav1d \
        --enable-libsvtav1 \
        --enable-libvmaf \
        --enable-libvpx \
        --disable-shared || {
          less ffbuild/config.log
          exit 1
        }
    - make -j $(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu) install
    - mv ffmpeg ..
    - ccache -s

Linux Enc Test:
  extends: .tests
  stage: test
  script:
    - &enc-test-script |
      for CMAKE_BUILD_TYPE in Release Debug; do
        ./Bin/Release/SvtAv1EncApp --preset 0 -i "$SVT_ENCTEST_FILENAME" -n 3 -b "test-pr-$(uname)-${CMAKE_BUILD_TYPE}-${SVT_ENCTEST_BITNESS}bit-m0.ivf"
        ./Bin/Release/SvtAv1EncApp --preset 8 -i "$SVT_ENCTEST_FILENAME" -n 120 -b "test-pr-$(uname)-${CMAKE_BUILD_TYPE}-${SVT_ENCTEST_BITNESS}bit-m8.ivf"
      done
  parallel:
    matrix:
      - SVT_ENCTEST_FILENAME: akiyo_cif.y4m
        SVT_ENCTEST_BITNESS: 8
      - SVT_ENCTEST_FILENAME: Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m
        SVT_ENCTEST_BITNESS: 10
  artifacts:
    untracked: false
    expire_in: 1 days
    paths:
      - "test-pr-*-*bit-m*.ivf"
  needs:
    - 'Linux (GCC 10)'


#
# macOS CI Jobs
#
.macos-compiler-base:
  stage: compile
  tags:
    - macos-ci
  variables:
    VLC_PATH: /Users/videolanci/sandbox/bin
    CFLAGS: -Werror -Wshadow $EXTRA_CFLAGS
    CXXFLAGS: -Werror -Wshadow $EXTRA_CXXFLAGS
  script:
    - export PATH="${VLC_PATH}:${PATH}"
    - eval cmake -B Build -DCMAKE_INSTALL_PREFIX=${PREFIX_DIR:=/usr/local} -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:=Release} $EXTRA_CMAKE_FLAGS
    - cmake --build Build --config $CMAKE_BUILD_TYPE

.macos-fetch-testdata: &macos-fetch-testdata |
  for file in $TEST_FILES; do
    curl -fLs "https://gitlab.com/AOMediaCodec/aom-testing/-/raw/master/test-files/$file.zst" | zstd -d - -o $file
  done

macOS (Xcode):
  extends: .macos-compiler-base
  variables:
    CMAKE_GENERATOR: Xcode
  artifacts:
    expire_in: 1 day
    paths:
      - Bin/Release/*

macOS (Ninja, Static, Tests):
  extends: .macos-compiler-base
  variables:
    EXTRA_CMAKE_FLAGS: -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTING=ON
    EXTRA_CFLAGS: -Wno-error -g
    EXTRA_CXXFLAGS: -Wno-error -g
    PREFIX_DIR: ${CI_PROJECT_DIR}/SVT-Install/
  after_script:
    - mkdir -p ${PREFIX_DIR}
    - cmake --build Build --target install
  artifacts:
    expire_in: 1 day
    paths:
      - Bin/Release/*
      - ${CI_PROJECT_DIR}/SVT-Install/*

macOS Unit Tests:
  tags:
    - macos-ci
  stage: test
  parallel: 10
  variables:
    GTEST_TOTAL_SHARDS: 10
    GTEST_OUTPUT: "xml:report.xml"
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
    - export GTEST_SHARD_INDEX=$((CI_NODE_INDEX - 1))
    - ./Bin/Release/SvtAv1UnitTests
  needs:
    - 'macOS (Ninja, Static, Tests)'

macOS E2E Tests:
  tags:
    - macos-ci
  stage: test
  parallel: 10
  variables:
    GTEST_TOTAL_SHARDS: 10
    GTEST_OUTPUT: "xml:report.xml"
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
    - export GTEST_SHARD_INDEX=$((CI_NODE_INDEX - 1))
    - mkdir -p testvectors && export SVT_AV1_TEST_VECTOR_PATH="$PWD/testvectors"
    - cmake -GNinja -B Build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=ON
    - cmake --build Build --target TestVectors
    - ./Bin/Release/SvtAv1E2ETests --gtest_filter=-*DummySrcTest*
  needs:
    - 'macOS (Ninja, Static, Tests)'

macOS Enc Test:
  tags:
    - macos-ci
  stage: test
  variables:
    TEST_FILES: akiyo_cif.y4m Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m
  script:
    - *macos-fetch-testdata
    - ./Bin/Release/SvtAv1EncApp --preset 0 -i "$SVT_ENCTEST_FILENAME" -n 3 -b "test-pr-${SVT_ENCTEST_BITNESS}bit-m0.ivf"
    - ./Bin/Release/SvtAv1EncApp --preset 8 -i "$SVT_ENCTEST_FILENAME" -n 120 -b "test-pr-${SVT_ENCTEST_BITNESS}bit-m8.ivf"
  parallel:
    matrix:
      - SVT_ENCTEST_FILENAME: "akiyo_cif.y4m"
        SVT_ENCTEST_BITNESS: 8
      - SVT_ENCTEST_FILENAME: "Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m"
        SVT_ENCTEST_BITNESS: 10
  needs:
    - 'macOS (Ninja, Static, Tests)'

macOS FFmpeg (Static):
  stage: test
  tags:
    - macos-ci
  variables:
    PREFIX_DIR: ${CI_PROJECT_DIR}/SVT-Install/
    PKG_CONFIG_PATH: ${CI_PROJECT_DIR}/SVT-Install/lib/pkgconfig
    CPPFLAGS: -I${CI_PROJECT_DIR}/SVT-Install/include
    LDFLAGS: -L${CI_PROJECT_DIR}/SVT-Install/lib
  script:
    - git clone https://aomedia.googlesource.com/aom
    - git clone https://chromium.googlesource.com/webm/libvpx
    - git clone https://code.videolan.org/videolan/dav1d.git
    - git clone https://github.com/Netflix/vmaf.git
    - git clone https://github.com/FFmpeg/FFmpeg.git FFmpeg-src

    # SVT-AV1
    #- cmake -GNinja -B svtav1-build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_APPS=OFF -DBUILD_DEC=OFF
    #- cmake --build svtav1-build --config Release --target install

    # aom
    - cmake -S aom -B aom-build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=${PREFIX_DIR} -DBUILD_SHARED_LIBS=OFF -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DENABLE_DOCS=0 -DENABLE_TESTDATA=0 -DENABLE_TOOLS=0
    - cmake --build aom-build --config Release --target install

    # libvpx
    - mkdir -p vpx-build && cd vpx-build || exit 1
    - |
      ../libvpx/configure \
        --disable-dependency-tracking \
        --disable-docs \
        --disable-examples \
        --disable-libyuv \
        --disable-postproc \
        --disable-shared \
        --disable-tools \
        --disable-unit-tests \
        --disable-webm-io \
        --enable-postproc \
        --enable-runtime-cpu-detect \
        --enable-vp8 --enable-vp9 \
        --enable-vp9-highbitdepth \
        --enable-vp9-postproc \
        --prefix=${PREFIX_DIR}
    - make -j $(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu) install
    - cd -

    # dav1d
    - |
      meson setup \
        --default-library static \
        --buildtype release \
        --libdir lib \
        --prefix ${PREFIX_DIR} \
        -Denable_tests=false \
        -Denable_examples=false \
        -Denable_tools=false \
        dav1d-build dav1d
    - meson install -C dav1d-build

    # vmaf
    - |
      meson setup \
        --default-library static \
        --buildtype release \
        --libdir lib \
        --prefix ${PREFIX_DIR} \
        -Denable_tests=false \
        -Denable_docs=false \
        -Dbuilt_in_models=true \
        -Denable_float=true \
        vmaf-build vmaf/libvmaf
    - meson install -C vmaf-build

    # symbol conflict tests
    - |
      conflicts=$(
        nm -Ag --defined-only ${PREFIX_DIR}/lib/lib{SvtAv1Enc,aom,dav1d,vpx,vmaf}.a 2>/dev/null |
        cut -d' ' -f 4 |
        sort |
        uniq -d
      )
      if [ -n "$conflicts" ]; then
        printf 'Conflicts Found!\n'
        for conflict in $conflicts; do
          nm -Ag --defined-only ${PREFIX_DIR}/lib/lib{SvtAv1Enc,aom,dav1d,vpx,vmaf}.a 2>/dev/null |
          sort -k3 |
          grep -- " $conflict$"
        done
        exit 1
      fi

    # FFmpeg
    # Uses ld=CXX for libvmaf to autolink the stdc++ library
    - mkdir -p FFmpeg-build && cd FFmpeg-build || exit 1
    - |
      ../FFmpeg-src/configure \
        --arch=x86_64 \
        --pkg-config-flags="--static" \
        --cc="${CC:-ccache gcc}" \
        --cxx="${CXX:-ccache g++}" \
        --ld="${CXX:-ccache g++}" \
        --enable-gpl --enable-static \
        --prefix="${PREFIX_DIR}" \
        --enable-libaom \
        --enable-libdav1d \
        --enable-libsvtav1 \
        --enable-libvmaf \
        --enable-libvpx \
        --disable-shared || {
          less ffbuild/config.log
          exit 1
        }
    - make -j $(sysctl -n hw.ncpu) install
    - mv ./ffmpeg $CI_PROJECT_DIR
  needs:
    - 'macOS (Ninja, Static, Tests)'
  artifacts:
    untracked: false
    expire_in: 30 days
    paths:
      - ffmpeg

#
# Window CI Jobs
#
.windows-ci-common:
  image: registry.gitlab.com/aomediacodec/aom-testing/core1809
  tags:
    - svt-windows-docker

.windows-unpack-testdata: &windows-unpack-testdata |
  Move-Item C:/*.zst .
  zstd -d *.zst

Win64 (Release, GCC, FFmpeg):
  extends: .windows-ci-common
  stage: compile
  variables:
    CC: ccache gcc
    CXX: ccache g++
    CFLAGS: -pipe -O3
    CXXFLAGS: -pipe -O3
    LDFLAGS: -pipe -O3 -static -static-libgcc -static-libstdc++
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache
    GIT_DEPTH: 0
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .ccache
    policy: pull-push
  before_script:
    - ccache -s

    # SVT-AV1 Here to prevent the -dirty suffix
    - cmake -B svtav1-build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_APPS=OFF -DBUILD_DEC=OFF -DCMAKE_INSTALL_PREFIX=C:/msys64/mingw64
    - cmake --build svtav1-build --config Release --target install

    - git clone https://aomedia.googlesource.com/aom
    - git clone https://chromium.googlesource.com/webm/libvpx
    - git clone https://code.videolan.org/videolan/dav1d.git
    - git clone https://github.com/Netflix/vmaf.git
    - git clone https://github.com/FFmpeg/FFmpeg.git
  script:
    # aom
    - cmake -S aom -B aom-build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DENABLE_DOCS=0 -DENABLE_TESTDATA=0 -DENABLE_TOOLS=0 -DCMAKE_INSTALL_PREFIX=C:/msys64/mingw64
    - cmake --build aom-build --config Release --target install

    # libvpx
    - New-Item -type Directory vpx-build
    - Set-Location vpx-build
    - |
      dash ../libvpx/configure `
        --disable-dependency-tracking `
        --disable-docs `
        --disable-examples `
        --disable-libyuv `
        --disable-postproc `
        --disable-shared `
        --disable-tools `
        --disable-unit-tests `
        --disable-webm-io `
        --enable-postproc `
        --enable-runtime-cpu-detect `
        --enable-vp8 --enable-vp9 `
        --enable-vp9-highbitdepth `
        --enable-vp9-postproc `
        --prefix=/mingw64
    - make -j $((Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors + 2) install
    - cd ..

    # dav1d
    - |
      meson setup `
        --default-library static `
        --buildtype release `
        --libdir lib `
        -Denable_tests=false `
        -Denable_examples=false `
        -Denable_tools=false `
        --prefix C:/msys64/mingw64 `
        dav1d-build dav1d
    - meson install -C dav1d-build

    # vmaf
    - |
      meson setup `
        --default-library static `
        --buildtype release `
        --libdir lib `
        -Denable_tests=false `
        -Denable_docs=false `
        -Dbuilt_in_models=true `
        -Denable_float=true `
        --prefix C:/msys64/mingw64 `
        vmaf-build vmaf/libvmaf
    - meson install -C vmaf-build

    # FFmpeg
    # Uses ld=CXX for libvmaf to autolink the stdc++ library
    - New-Item -type Directory FFmpeg-build
    - Set-Location FFmpeg-build
    - |
      dash ../FFmpeg/configure `
        --arch=x86_64 `
        --pkg-config-flags="--static" `
        --cc="${env:CC}" `
        --cxx="${env:CXX}" `
        --ld="${env:CXX}" `
        --enable-gpl --enable-static `
        --enable-libaom `
        --enable-libdav1d `
        --enable-libsvtav1 `
        --enable-libvmaf `
        --enable-libvpx `
        --disable-shared `
        --prefix=/mingw64
    - make -j $((Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors + 2) install
    - Move-Item ffmpeg.exe ..
    - ccache -s

  artifacts:
    untracked: false
    expire_in: 30 day
    paths:
      - ffmpeg.exe

Win64 (Release, MSVC, Tests):
  extends: .windows-ci-common
  stage: compile
  variables:
    CFLAGS: /WX
    CXXFLAGS: /WX
    CMAKE_GENERATOR: Visual Studio 16 2019
  script:
    - cmake -B Build -DBUILD_TESTING=ON
    - cmake --build Build --config Release
  after_script:
    - Move-Item Bin\Release\* .
  artifacts:
    untracked: false
    expire_in: 1 day
    paths:
      - "*.exe"
      - "*.dll"
      - "*.pdb"

Win64 Unit Tests:
  extends: .windows-ci-common
  stage: test
  parallel: 10
  variables:
    GTEST_TOTAL_SHARDS: 10
    GTEST_OUTPUT: "xml:report.xml"
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
    - $env:GTEST_SHARD_INDEX = $env:CI_NODE_INDEX - 1
    - ./SvtAv1UnitTests.exe --gtest_filter=-*FFT*'
  needs:
    - 'Win64 (Release, MSVC, Tests)'

Win64 Enc Test:
  extends: .windows-ci-common
  stage: test
  script:
    - *windows-unpack-testdata
    - ./SvtAv1EncApp.exe --preset 0 -i "$env:SVT_ENCTEST_FILENAME" -n 3 -b "test-pr-${env:SVT_ENCTEST_BITNESS}bit-m0.ivf"'
    - ./SvtAv1EncApp.exe --preset 8 -i "$env:SVT_ENCTEST_FILENAME" -n 120 -b "test-pr-${env:SVT_ENCTEST_BITNESS}bit-m8.ivf"'
  parallel:
    matrix:
      - SVT_ENCTEST_FILENAME: "akiyo_cif.y4m"
        SVT_ENCTEST_BITNESS: 8
      - SVT_ENCTEST_FILENAME: "Chimera-Aerial_480x264_2997fps_10bit_420_150frames.y4m"
        SVT_ENCTEST_BITNESS: 10
  needs:
    - 'Win64 (Release, MSVC, Tests)'

Win64 E2E Tests:
  extends: .windows-ci-common
  stage: test
  parallel: 10
  variables:
    GTEST_TOTAL_SHARDS: 10
    GTEST_OUTPUT: "xml:report.xml"
  artifacts:
    when: always
    reports:
      junit: report.xml
  script:
    - '[string]$env:SVT_AV1_TEST_VECTOR_PATH = New-Item -ItemType Directory -Force -Name "testdata"'
    - cmake -B Build -DBUILD_TESTING=ON
    - cmake --build Build --target TestVectors
    - $env:GTEST_SHARD_INDEX = $env:CI_NODE_INDEX - 1
    - ./SvtAv1E2ETests.exe --gtest_filter=-*DummySrcTest*'
  needs:
    - 'Win64 (Release, MSVC, Tests)'
